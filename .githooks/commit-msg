#!/usr/bin/env python

import sys, os, re
from subprocess import check_output

# Text decoration variables
RED_BOLD='\033[0;31;1m'
GREEN_BOLD='\033[0;32;1m'
YELLOW_BOLD='\033[0;33;1m'
BOLD='\033[1m'
NORMAL='\033[0m'

# Collect the parameters
commit_msg_filepath = sys.argv[1]

# Figure out which branch we're on
branch_name = check_output(['git', 'symbolic-ref', '--short', 'HEAD']).strip()

print "%scommit-msg: Testing for commit format error...%s" % (BOLD, NORMAL)

with open(commit_msg_filepath, 'r') as file:
    commit_message = file.read()

    type_pattern = '([a-z]+)'
    scope_pattern = '([a-z]+)'
    subject_branch_pattern = '([a-z0-9-]+)'
    subject_commit_pattern = '([a-z0-9\s-]+)'
    card_name_pattern = '[A-Z]+'
    card_number_pattern = '[0-9]+'
    card_pattern = "(%s-%s)" % (card_name_pattern, card_number_pattern)

    branch_pattern = "^%s\/%s#%s$" % (type_pattern, card_pattern, subject_branch_pattern)

    result_match_branch = re.match(branch_pattern, branch_name)
    type_branch = result_match_branch.group(1)
    card_branch = result_match_branch.group(2)

    commit_pattern = "^%s\s%s\(%s\):\s%s$" % (card_branch, type_pattern, scope_pattern, subject_commit_pattern)

    result_commit_pattern = re.match(commit_pattern, commit_message)
    if (result_commit_pattern == None):
        print "%scommit-msg: The commit message does not have a valid format%s" % (RED_BOLD, NORMAL)
        print "The commit message must follows the format <CARD-NAME>-<card-number> <type>(<scope>): <subject>"
        print "Example: CARD-0000 feat(hooks): created hook for commit-msg event"
        print "%sAborting commit due to commit message format error%s" % (RED_BOLD, NORMAL)
        sys.exit(1)

    print "%scommit-msg: The commit message has a valid format%s" % (GREEN_BOLD, NORMAL)
    sys.exit(0)